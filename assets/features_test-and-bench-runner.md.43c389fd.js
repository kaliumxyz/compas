import{_ as n,c as s,o as a,a as t}from"./app.d0d65fcc.js";const f='{"title":"Testing and benchmarking","description":"","frontmatter":{},"headers":[{"level":2,"title":"Testing","slug":"testing"},{"level":3,"title":"Basic test file","slug":"basic-test-file"},{"level":3,"title":"Running tests","slug":"running-tests"},{"level":3,"title":"Setup and teardown per test file","slug":"setup-and-teardown-per-test-file"},{"level":3,"title":"Asserting on throws","slug":"asserting-on-throws"},{"level":3,"title":"Test configuration","slug":"test-configuration"},{"level":3,"title":"API","slug":"api"},{"level":3,"title":"CLI","slug":"cli"},{"level":3,"title":"Config","slug":"config"},{"level":3,"title":"Output","slug":"output"},{"level":3,"title":"Node.js assertions","slug":"node-js-assertions"},{"level":3,"title":"Randomize rounds","slug":"randomize-rounds"},{"level":3,"title":"Coverage","slug":"coverage"}],"relativePath":"features/test-and-bench-runner.md","lastUpdated":1635769453832}',e={},o=t(`<h1 id="testing-and-benchmarking" tabindex="-1">Testing and benchmarking <a class="header-anchor" href="#testing-and-benchmarking" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Requires <code>@compas/cli</code> to be installed</p></div><h2 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-hidden="true">#</a></h2><p>A project setup needs a test runner of course. Compas comes with its own test runner loosely inspired by <a href="https://github.com/substack/tape" target="_blank" rel="noopener noreferrer">tape</a>. It comes with a few assertions, async testing, and the possibility of doing nesting test suites. <code>AssertionErrors</code> by using Node.js builtin <a href="https://nodejs.org/api/assert.html" target="_blank" rel="noopener noreferrer">assert</a> -module are handled as well.</p><h3 id="basic-test-file" tabindex="-1">Basic test file <a class="header-anchor" href="#basic-test-file" aria-hidden="true">#</a></h3><p>A basic test file looks like the following:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@compas/cli&quot;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;my test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  t<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  t<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  t<span class="token punctuation">.</span><span class="token function">notOk</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  t<span class="token punctuation">.</span><span class="token function">notEqual</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  t<span class="token punctuation">.</span><span class="token function">deepEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="running-tests" tabindex="-1">Running tests <a class="header-anchor" href="#running-tests" aria-hidden="true">#</a></h3><p>There are two ways to run tests. The short way is to use <code>yarn compas test</code> which will run all test files in your project. There is also the option to run a test file directly like <code>node ./file.test.js</code> or <code>yarn compas run ./file.test.js</code>. However, to do this you need to add the following to your test file:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mainTestFn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@compas/cli&quot;</span><span class="token punctuation">;</span>

<span class="token function">mainTestFn</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>It works based on <code>mainFn</code> as explained in the <a href="/features/script-runner.html#mainfn">script runner page</a>.</p><h3 id="setup-and-teardown-per-test-file" tabindex="-1">Setup and teardown per test file <a class="header-anchor" href="#setup-and-teardown-per-test-file" aria-hidden="true">#</a></h3><p>Most test runners have a special global function that runs before or after all tests in a single file. This is often called <code>beforeAll</code> / <code>afterAll</code>. We don&#39;t need this in the compas provided test runner as all tests run in the order they are specified.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> mainTestFn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@compas/cli&quot;</span><span class="token punctuation">;</span>

<span class="token function">mainTestFn</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;setup and teardown&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> myTestGlobal <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

  <span class="token comment">// Every callback function can be async</span>
  t<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;setup&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    myTestGlobal <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  t<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;my test global is there&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    t<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>myTestGlobal<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// In this example not necessary since myTestGlobal will</span>
  <span class="token comment">// be out of scope for all other code</span>
  t<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;teardown&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    myTestGlobal <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">pass</span><span class="token punctuation">(</span><span class="token string">&quot;successful teardown&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="asserting-on-throws" tabindex="-1">Asserting on throws <a class="header-anchor" href="#asserting-on-throws" aria-hidden="true">#</a></h3><p>Asserting on throws is another overlooked part of some test runners. This test runner does not provide any fancy util like <code>t.throws(functionThatThrows)</code>, but expects the user to use normal control flow like try / catch.</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">throws</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Oops!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">doesNotThrow</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;Function that throws&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">throws</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// If the function doesn&#39;t throw, no assertion is done, which results in a test failure by the runner.</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// A logger from @compas/stdlib is available</span>
    t<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">,</span> <span class="token string">&quot;Oops!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;Function that does not throw&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">doesNotThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  t<span class="token punctuation">.</span><span class="token function">pass</span><span class="token punctuation">(</span><span class="token string">&quot;The function did not throw!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// If the function does throw, the test runner catches the error and fails this test with the caught exception.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="test-configuration" tabindex="-1">Test configuration <a class="header-anchor" href="#test-configuration" aria-hidden="true">#</a></h3><p>Test configuration is auto loaded from <code>{root}/test/config.js</code>. An example with the defaults is below:</p><div class="language-js"><pre><code><span class="token comment">// Individual test timeout, i.e. the function provided to \`test\` and \`t.test\`</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> timeout <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span>

<span class="token comment">// Enforce that every test has at least a single subtest (i.e. t.test()) or an assertion (t.pass())</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> enforceSingleAssertion <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Global setup function</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Global teardown function</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Timeout is also configurable for subtests via <code>t.timeout</code> like so:</p><div class="language-js"><pre><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;configurable timeout&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  t<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

  t<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;race with the timeout&quot;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// No exception happening here</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      t<span class="token punctuation">.</span><span class="token function">pass</span><span class="token punctuation">(</span><span class="token string">&quot;subtest is faster than the parent timeout of 20 milliseconds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      t<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">&quot;This should not trigger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      t<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-hidden="true">#</a></h3><p>Provided by <code>@compas/cli</code></p><h4 id="maintestfn" tabindex="-1">mainTestFn() <a class="header-anchor" href="#maintestfn" aria-hidden="true">#</a></h4><p>This marks a file as a test file and starts the test runner when a file is executed directly as Node.js script. It is based on <code>mainFn</code> as explained in the <a href="/features/script-runner.html#mainfn">script runner page</a>.</p><p>There is only a single way to call this function, always:</p><div class="language-js"><pre><code><span class="token function">mainTestFn</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>This call may exists in all test files and does nothing when tests are executed via <code>yarn compas test</code>.</p><h4 id="test-name-callback" tabindex="-1">test(name, callback) <a class="header-anchor" href="#test-name-callback" aria-hidden="true">#</a></h4><p>This is the only other directly exposed function of the test runner and is used to register tests, also often called a test suite. The callback <code>t</code> contains the functions and properties described below. The callback may be synchronous or return a promise. Any uncaught exception thrown in the callback, will be caught and results in a failed test.</p><p>Parameters:</p><ul><li><code>name</code> (string): The test suite name</li><li><code>callback</code> (function): The test function</li></ul><h5 id="t-log" tabindex="-1">t.log <a class="header-anchor" href="#t-log" aria-hidden="true">#</a></h5><p>A logger instance provided by <code>@compas/stdlib</code>. See <a href="/features/logger-and-events.html#logger">logger</a> for more details.</p><h5 id="t-timeout" tabindex="-1">t.timeout <a class="header-anchor" href="#t-timeout" aria-hidden="true">#</a></h5><p>A setter to configure the timeout of subtests registered via <code>t.test</code>. To configure this value see <a href="#config">config</a></p><h5 id="t-test-name-callback" tabindex="-1">t.test(name, callback) <a class="header-anchor" href="#t-test-name-callback" aria-hidden="true">#</a></h5><p>Subtests can be registered any number of levels deep with <code>t.test()</code>, the name and callback work exactly the same as <code>test</code>.</p><p>All subtests are executed in the same order as they are registered and will never run in parallel.</p><h5 id="assertions" tabindex="-1">Assertions <a class="header-anchor" href="#assertions" aria-hidden="true">#</a></h5><p><strong>t.ok(value, msg?)</strong></p><p>Assert that the value passed in is &#39;truthy&#39;. In JavaScript this is any value except <code>null</code>, <code>undefined</code>, <code>false</code>, <code>&quot;&quot;</code> and <code>0</code>.</p><p><strong>t.notOk(value, msg?)</strong></p><p>Assert that the value passed in is &#39;falsey&#39;. In JavaScript this corresponds to the following values: <code>null</code>, <code>undefined</code> , <code>false</code>, <code>&quot;&quot;</code> and <code>0</code>.</p><p><strong>t.equal(value, expected, msg?)</strong></p><p>Assert that <code>value</code> is strict equal to <code>expected</code>.</p><p>Some examples:</p><div class="language-js"><pre><code>t<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pass</span>
t<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Pass</span>

t<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Fail</span>
t<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Fail</span>
</code></pre></div><p><strong>t.notEqual(value, notExpected, msg?)</strong></p><p>Assert that <code>value</code> is not strict equal to <code>expected</code>.</p><p><strong>t.pass(msg?)</strong></p><p>Signal to the test runner that an implicit assertion passed. This is often used when testing control flow, like checking that a <code>catch</code> block is executed.</p><p><strong>t.fail(msg?)</strong></p><p>Signal to the test runner that an implicit assertion failed. This is also often used when testing control flow. For example in the following example where the function <code>willThrow</code> should really throw an error.</p><div class="language-js"><pre><code><span class="token function">mainTestFn</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">willThrow</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Really did throw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;willThrow really throws&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">willThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">&quot;willThrow did not throw.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
    t<span class="token punctuation">.</span><span class="token function">pass</span><span class="token punctuation">(</span><span class="token string">&quot;willThrow, did indeed throw an error.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>When <code>enforceSingleAssertion</code> is set to <code>true</code> in the config, the above is more idiomatically written as:</p><div class="language-js"><pre><code><span class="token function">mainTestFn</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">willThrow</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Really did throw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;willThrow really throws&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">willThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
    t<span class="token punctuation">.</span><span class="token function">pass</span><span class="token punctuation">(</span><span class="token string">&quot;willThrow, did indeed throw an error.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>In this case when the <code>willThrow()</code> function doesn&#39;t throw, the test runners throws an error that <code>willThrow really throws</code> didn&#39;t execute a single assertion. Because the &#39;catch&#39; block did not executed and consecutively the <code>t.pass()</code> not called.</p><p><strong>t.deepEqual(value, expected, msg?)</strong></p><p>Compare <code>value</code> and <code>expected</code> using the Node.js built-in <a href="https://nodejs.org/api/assert.html#assert_assert_deepstrictequal_actual_expected_message" target="_blank" rel="noopener noreferrer">deepStrictEqual</a>.</p><h3 id="cli" tabindex="-1">CLI <a class="header-anchor" href="#cli" aria-hidden="true">#</a></h3><p>There are two ways to run tests:</p><ul><li><code>yarn compas test</code> runs all tests in files where the name ends with <code>.test.js</code></li><li><code>yarn compas ./path/to/file.test.js</code> runs a single test file, provided that the file calls <code>mainTestFn(import.<wbr>meta)</code>.</li></ul><p>Whe running all tests, Compas will automatically utilize <a href="https://nodejs.org/api/worker_threads.html" target="_blank" rel="noopener noreferrer">worker threads</a> to do some parallel test running. Compas will run <code>cpu core count - 1</code> workers. Workers will execute a single suite and then request a new test file from the runner. All test suites registered by importing a test file, will run in serial on a single worker. Executing with <code>yarn compas test --serial</code> will disable the workers and run all test suite in a single process.</p><p>The <code>--watch</code> feature can also be used, via <code>yarn compas test --watch</code> or <code>yarn compas --watch ./path/to/file.test.js</code>. The test runner will then restart when a JavaScript or json file is changed.</p><h3 id="config" tabindex="-1">Config <a class="header-anchor" href="#config" aria-hidden="true">#</a></h3><p>When tests are executed, a config file attempted to be loaded from <code>test/config.js</code>. This file can export the following three items:</p><p><strong>timeout</strong></p><p>A configurable timeout in milliseconds. This is enforced for every callback provided to <code>test</code> or <code>t.test</code>. Defaults to 2.5 seconds.</p><p><strong>enforceSingleAssertion</strong></p><p>The runner enforces that every <code>test()</code> and <code>t.test()</code> call does at least a single assertion or creates at least a single subtest.</p><p><strong>setup</strong></p><p>A function that is called before any test file is imported. Executed both for single file tests and when running all tests via <code>yarn compas test</code>. When workers are used as explained in the <a href="#cli">cli section</a>, all workers will run this setup function. If the function returns a promise, the runner will wait till the promise is resolved before loading any test file.</p><p>Note that when a single test file is executed, the test file and it&#39;s imports are already resolved before this setup function will be called.</p><p><strong>teardown</strong></p><p>A global teardown function, behaving the same as the previous mentioned setup function. This is called if available, when all test suites did run, regardless of the test result.</p><h3 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-hidden="true">#</a></h3><p>On successful runs, the test runner will only print the number of assertions as follows:</p><div class="language-text"><pre><code>12:30:38.640 info[test]
Total assertions: 15
          Passed: 15
          Failed: 0
-----------
</code></pre></div><p>When tests fail, we have a few options; an assertion failed or an uncaught exception was caught by the runner. These will be printed as follows, with annotated function calls that triggered these errors:</p><div class="language-text"><pre><code>12:42:39.578 error[test]
Total assertions: 6
          Passed: 1
          Failed: 5
-----------
failing assertion suite (1/5)
  // t.fail(&quot;Fail message&quot;)
  fail: Fail message
  // t.ok(false)
  ok
    Expected: (boolean) true
    Actual: (boolean) false
  // t.equal(&quot;t.equal()&quot;, &quot;expected&quot;);
  // The type is printed as well, to make it easier to spot when an object is passed in
  equal
    Expected: (string) expected
    Actual: (string) &quot;t.equal()&quot;
  // t.deepEqual({ foo: &quot;bar&quot; }, { bar: &quot;foo&quot; });
  deepEqual
    Expected values to be strictly deep-equal:
    + actual - expected

      {
    +   foo: &#39;bar&#39;
    -   bar: &#39;foo&#39;
      }
uncaught exception suite (0/0)
  // throw new Error(&quot;Plain JavaScript error message&quot;);
  uncaughtException (0/0)
    Error - Plain JavaScript error message
      {
        name: &#39;Error&#39;,
        message: &#39;Plain JavaScript error message&#39;,
        stack: [
          &#39;at Object.callback (file:///home/dirk/projects/compas-docs/src/exception.test.js:17:11)&#39;,
          ...,
        ]
      }
  // throw new AppError(&quot;validation.error&quot;, 500, { info: &quot;object&quot; });
  @compas/stdlib AppError (0/0)
    AppError: validation.error - 500
      {
        key: &#39;validation.error&#39;,
        status: 500,
        info: { info: &#39;object&#39; },
        stack: [
          &#39;at Object.callback (file:///home/dirk/projects/compas-docs/src/exception.test.js:21:11)&#39;,
          ...,
        ],
        originalError: undefined
      }
  // import assert from &quot;assert&quot;;
  // assert.strictEqual(&quot;actual&quot;, &quot;expected&quot;);
  Node.js AssertionError (0/1)
    strictEqual
      Expected values to be strictly equal:
      + actual - expected

      + &#39;actual&#39;
      - &#39;expected&#39;
</code></pre></div><h3 id="node-js-assertions" tabindex="-1">Node.js assertions <a class="header-anchor" href="#node-js-assertions" aria-hidden="true">#</a></h3><p>As noted above <code>t.deepStrictEqual({}, {})</code> uses a Node.js built-in for the assertion. All other assertion functions from the <a href="https://nodejs.org/api/assert.html" target="_blank" rel="noopener noreferrer">assert</a> module can be used. The only difference when using these, is that other assertions in the same test function will not run, unlike the assertions provided by Compas. Other assertion libraries that are able to throw <a href="https://nodejs.org/api/assert.html#assert_new_assert_assertionerror_options" target="_blank" rel="noopener noreferrer">Node.js AssertionErrors</a> should be compatible as well, but are not tested.</p><h3 id="randomize-rounds" tabindex="-1">Randomize rounds <a class="header-anchor" href="#randomize-rounds" aria-hidden="true">#</a></h3><p>Another feature of the test runner is to run the tests multiple times, changing the order of file loading. This feature can be enabled by using <code>yarn compas test --randomize-rounds=n</code> where <code>n</code> is any integer, for example <code>3</code>. This may be useful to discover flaky tests or may enable you to do some &#39;fuzzing&#39; although not completely made for that.</p><p>The tests will run as described above, workers will spawn, global setup functions called and test files loaded. However, when tests pass the known test files, ending in <code>.test.js</code>, will be shuffled and run again. On new workers, with a new global setup and teardown call, etc... If any of the runs fail, only the failed result will be printed. When all rounds are successful, the total number of assertions will be printed. This does not work in combination with <code>--serial</code>.</p><h3 id="coverage" tabindex="-1">Coverage <a class="header-anchor" href="#coverage" aria-hidden="true">#</a></h3><p>A test runner isn&#39;t complete without a coverage checker. So we utilize <a href="https://www.npmjs.com/package/c8" target="_blank" rel="noopener noreferrer">c8</a> for that. By running <code>yarn compas coverage</code> collecting coverage is enabled. Check <a href="https://www.npmjs.com/package/c8" target="_blank" rel="noopener noreferrer">c8</a> for configuration options.</p>`,89),p=[o];function c(l,i,u,r,k,d){return a(),s("div",null,p)}var g=n(e,[["render",c]]);export{f as __pageData,g as default};
