import{_ as n,c as s,o as a,a as t}from"./app.d0d65fcc.js";const g='{"title":"Release notes v0.0.119","description":"","frontmatter":{},"headers":[{"level":2,"title":"Code gen","slug":"code-gen"},{"level":2,"title":"Store","slug":"store"},{"level":2,"title":"In closing","slug":"in-closing"}],"relativePath":"releases/0.0.119.md","lastUpdated":1635769453832}',e={},o=t(`<h1 id="release-notes-v0-0-119" tabindex="-1">Release notes v0.0.119 <a class="header-anchor" href="#release-notes-v0-0-119" aria-hidden="true">#</a></h1><p>More breaking changes, results in more release notes. So to do my self a favor, I should stop doing breaking changes, so I don&#39;t have to write release notes. Does it work that way? Maybe.</p><h2 id="code-gen" tabindex="-1">Code gen <a class="header-anchor" href="#code-gen" aria-hidden="true">#</a></h2><p>We are well on our way to enable the JSDoc eslint plugin. At last, the generator output should now be stable and never trigger an error when the jsdoc rules are enabled.</p><p>There was a bug in the generated sql &#39;where xxxIn&#39; behaviour. The generated where function would ignore an empty array, that could result in unexpectedly updating or deleting all rows of a table. In this release, an empty &#39;where xxxIn&#39; array should result in zero rows updated, deleted or selected.</p><p>We now have dynamic <code>ORDER BY</code> support in the sql generator. This works by accepting an array of columns you want to sort on, and an optional order specification. Using it would look something like the following:</p><div class="language-js"><pre><code><span class="token comment">// Get users sorted by their age, ascending</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">SELECT * FROM &quot;user&quot; u </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">userOrderBy</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>
  sql<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Get users sorted by their age descending, and if multiple users have the same age, on name ascending.</span>
<span class="token comment">// In tis case name is an optional column, so we can specify where the &#39;null&#39; values should go.</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">SELECT * FROM &quot;user&quot; u </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">userOrderBy</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    age<span class="token operator">:</span> <span class="token string">&quot;DESC&quot;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&quot;ASC NULLS FIRST&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The values that can be put in the &#39;orderBy&#39; and &#39;orderBySpec&#39; arguments, should be marked as <code>.searchable()</code> in the spec. Of course the query builder also supports these fields:</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token punctuation">[</span>newestUser<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">queryUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  orderBy<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;createdAt&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  orderBySpec<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;DESC&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  posts<span class="token operator">:</span> <span class="token punctuation">{</span>
    limit<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    orderBy<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;likedCount&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  limit<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>The above would get the &#39;newest&#39; user, with a single post that has the least likes. The default behaviour is still the same, <code>orderBy: [&quot;createdAt&quot;, &quot;updatedAt&quot;, &quot;id&quot;]</code>. However, you need to update the <code>xxxOrderBy</code> calls where you specified for example the <code>tableName</code> argument.</p><h2 id="store" tabindex="-1">Store <a class="header-anchor" href="#store" aria-hidden="true">#</a></h2><p>We removed the <code>getNestedFileGroup</code> in this release as the query builder has the same options and more. The only limit is that the new call doesn&#39;t return the full group depth, but instead you always specify the levels you need.</p><p>The following examples illustrate equal behaviour:</p><div class="language-js"><pre><code><span class="token comment">// Old</span>
<span class="token keyword">await</span> <span class="token function">getNestedFileGroup</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">{</span> excludeFiles<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// New, get 2 levels of children for all roots, correctly ordered.</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">queryFileGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  orderBy<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;order&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  children<span class="token operator">:</span> <span class="token punctuation">{</span>
    orderBy<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;order&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    children<span class="token operator">:</span> <span class="token punctuation">{</span>
      orderBy<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;order&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  where<span class="token operator">:</span> <span class="token punctuation">{</span>
    parentIsNull<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token comment">// Old</span>
<span class="token keyword">await</span> <span class="token function">getNestedFileGroup</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token punctuation">{</span> rootId<span class="token operator">:</span> myFileGroupId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// New, get 1 level of children for the specified &#39;root&#39;</span>
<span class="token comment">// and include the file, correctly ordered.</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">queryFileGroup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  orderBy<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;order&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  children<span class="token operator">:</span> <span class="token punctuation">{</span>
    orderBy<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;order&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    file<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  where<span class="token operator">:</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> myFileGroupId<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="in-closing" tabindex="-1">In closing <a class="header-anchor" href="#in-closing" aria-hidden="true">#</a></h2><p>That&#39;s it, we are expecting some more breaking changes in the query builder soon, as we move the <code>viaXxx</code> to the where builder instead. Also if you want to help design the next few things, pleas take a look at <a href="https://github.com/compasjs/compas/issues/690" target="_blank" rel="noopener noreferrer">dependencies between routes</a>, <a href="https://github.com/compasjs/compas/issues/568" target="_blank" rel="noopener noreferrer">consistent &amp; validated JSDoc</a> or <a href="https://github.com/compasjs/compas/issues/574" target="_blank" rel="noopener noreferrer">integrating OpenAPI 3 a bit more</a>.</p>`,17),p=[o];function c(u,l,r,i,k,d){return a(),s("div",null,p)}var m=n(e,[["render",c]]);export{g as __pageData,m as default};
