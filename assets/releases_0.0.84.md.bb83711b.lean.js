import{_ as n,c as s,o as a,a as t}from"./app.d0d65fcc.js";const h='{"title":"Release notes v0.0.84","description":"","frontmatter":{},"headers":[{"level":3,"title":"Code gen","slug":"code-gen"},{"level":3,"title":"Server","slug":"server"},{"level":3,"title":"In closing","slug":"in-closing"}],"relativePath":"releases/0.0.84.md","lastUpdated":1635769453832}',p={},o=t(`__VP_STATIC_START__<h1 id="release-notes-v0-0-84" tabindex="-1">Release notes v0.0.84 <a class="header-anchor" href="#release-notes-v0-0-84" aria-hidden="true">#</a></h1><p>This release contains some small fixes and features compared to the previous release. We also enabled tests and benchmarks in CI for the newly released Node.js 15!</p><h3 id="code-gen" tabindex="-1">Code gen <a class="header-anchor" href="#code-gen" aria-hidden="true">#</a></h3><p>In preparation for structure stability we do loose validation of the structure to generate for. This enables us to add new fields in releases without breaking the generators of previous releases.</p><p>A small feature added to the route builder is support for &#39;PATCH&#39; requests. Lbu still prefers to use &#39;PUT&#39; by convention, but this allows a wider range of OpenAPI specs to be imported.</p><p>We also have a few fixes for the previous release. The structure is now correctly dumped. In lbu 0.0.83 we didn&#39;t nest groups in the <code>structure</code> export from <code>structure.js</code>. And sql <code>in</code> and <code>notIn</code> in the generated were clause should use the correct sql types now, even when the field is an reference.</p><p>Lastly support is added for <code>app.addRelations(reference, ...relations)</code>. LBU requires that both sides of a relation are registered, but that wasn&#39;t possible without a hack:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> storeStructure <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./generated/index.js&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> App<span class="token punctuation">,</span> TypeCreator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@lbu/code-gen&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> App<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
  <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token string">&quot;myEntity&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">relations</span><span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">manyToOne</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">reference</span><span class="token punctuation">(</span><span class="token string">&quot;store&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;entities&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

storeStructure<span class="token punctuation">.</span>store<span class="token punctuation">.</span>file<span class="token punctuation">.</span>relations<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
  <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">oneToMany</span><span class="token punctuation">(</span><span class="token string">&quot;entities&quot;</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">reference</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;myEntity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>While the new variant looks a bit cleaner:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> App<span class="token punctuation">,</span> TypeCreator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@lbu/code-gen&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> App<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
  <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token string">&quot;myEntity&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">relations</span><span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">manyToOne</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">reference</span><span class="token punctuation">(</span><span class="token string">&quot;store&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;entities&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">addRelations</span><span class="token punctuation">(</span>
  <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">reference</span><span class="token punctuation">(</span><span class="token string">&quot;store&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">oneToMany</span><span class="token punctuation">(</span><span class="token string">&quot;entities&quot;</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">.</span><span class="token function">reference</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;myEntity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> result<span class="token punctuation">.</span>error<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="server" tabindex="-1">Server <a class="header-anchor" href="#server" aria-hidden="true">#</a></h3><p>We don&#39;t log the event call stack anymore for &#39;OPTIONS&#39; requests. This is done to keep the logs a bit cleaner.</p><h3 id="in-closing" tabindex="-1">In closing <a class="header-anchor" href="#in-closing" aria-hidden="true">#</a></h3><p>That&#39;s all for now. Have fun!</p>__VP_STATIC_END__`,14),e=[o];function c(u,l,i,r,k,d){return a(),s("div",null,e)}var g=n(p,[["render",c]]);export{h as __pageData,g as default};
