import{_ as n,c as s,o as a,a as e}from"./app.d0d65fcc.js";const m='{"title":"Script runner","description":"","frontmatter":{},"headers":[{"level":2,"title":"Running scripts","slug":"running-scripts"},{"level":2,"title":"mainFn","slug":"mainfn"},{"level":2,"title":"Watch options","slug":"watch-options"},{"level":2,"title":"Environment","slug":"environment"}],"relativePath":"features/script-runner.md","lastUpdated":1635769453832}',t={},o=e(`<h1 id="script-runner" tabindex="-1">Script runner <a class="header-anchor" href="#script-runner" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Requires <code>@compas/cli</code> and <code>@compas/stdlib</code> to be installed</p></div><h2 id="running-scripts" tabindex="-1">Running scripts <a class="header-anchor" href="#running-scripts" aria-hidden="true">#</a></h2><p>The <code>@compas/cli</code> package comes with more features. Some of these will be explored in later parts of this setup guide. For now, we will take a look at the script runner.</p><p>The script runner at its base starts your scripts the same way as you would with Node.js.</p><div class="language-shell"><pre><code><span class="token function">yarn</span> compas ./src/a.js
<span class="token comment"># Is the same as \`node ./src/a.js\`</span>
</code></pre></div><p>However, it can also run named scripts. It will look for scripts defined in your <code>package.json</code> and in the <code>scripts</code> directory at the root of your project. Create a file in <code>scripts/hello.js</code> with the following contents:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mainFn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@compas/stdlib&quot;</span><span class="token punctuation">;</span>

<span class="token function">mainFn</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">,</span> main<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">logger</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>When running <code>yarn compas help</code> it should list <code>hello</code> under the available script names. Let&#39;s run it:</p><div class="language-shell"><pre><code><span class="token function">yarn</span> compas hello
<span class="token comment"># Is the same as</span>
<span class="token function">yarn</span> compas run hello
</code></pre></div><p>As you may have seen in the output from <code>yarn compas help</code>, there is also a <code>--watch</code> flag. This flag can be used when specifying a path, but also when running a &#39;named&#39; script.</p><p>Let&#39;s start our <code>hello</code> script in watch-mode:</p><div class="language-shell"><pre><code><span class="token function">yarn</span> compas --watch hello
</code></pre></div><p>Now when making any changes to the log line and saving, you should see the script being restarted. If you just want to restart, type in <code>rs</code> and press enter in your terminal. By default, all your JavaScript files are watched. This is customizable via the <a href="/features/script-runner.html#watch-options">watch options</a>.</p><h2 id="mainfn" tabindex="-1">mainFn <a class="header-anchor" href="#mainfn" aria-hidden="true">#</a></h2><p>An often used utility provided by the stdlib is <code>mainFn</code>. This does a few things:</p><ul><li>Only runs if the file that you call <code>mainFn</code> in, is the &#39;main&#39; file</li><li>Reads the <code>.env</code> file if exists</li><li>Calls the provided callback, and handles uncaught exceptions.</li><li>Create a logger from <a href="/index.html#todo">@compas/stdlib</a></li></ul><p>Let&#39;s create two files. Both exporting a constant and calling <code>mainFn</code>:</p><div class="language-js"><pre><code><span class="token comment">// src/a.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mainFn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@compas/stdlib&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> b <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./b.js&quot;</span><span class="token punctuation">;</span>

<span class="token function">mainFn</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">logger</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;Hello from a.js&quot;</span><span class="token punctuation">,</span> b <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token comment">// src/b.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mainFn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@compas/stdlib&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> a <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./a.js&quot;</span><span class="token punctuation">;</span>

<span class="token function">mainFn</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">logger</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token operator">:</span> <span class="token string">&quot;Hello from b.js.&quot;</span><span class="token punctuation">,</span> a <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre></div><p>Now if we run <code>src/a.js</code>, we see the following:</p><div class="language-txt"><pre><code>$ node ./src/a.js
{
  message: &quot;Hello from a.js.&quot;,
  b: false,
}
</code></pre></div><p>When running <code>src/b.js</code>:</p><div class="language-txt"><pre><code>$ node ./src/b.js
{
  message: &quot;Hello from b.js.&quot;,
  a: true,
}
</code></pre></div><p>As you can see in the output, only a single callback passed to <code>mainFn</code> is called. This callback in <code>src/a.js</code> only being called when it is the starting point of your program, ie started via <code>node ./src/a.js</code>. Consequently, the callback passed in <code>src/b.js</code> is only called when you start your program with <code>node ./src/b.js</code>.</p><h2 id="watch-options" tabindex="-1">Watch options <a class="header-anchor" href="#watch-options" aria-hidden="true">#</a></h2><p>Scripts can export this to control if and how they will be watched.</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">const</span> cliWatchOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  disable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// ignore changes in the docs directory or ending with &#39;.test.js&#39;.</span>
  ignoredPatterns<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;docs&quot;</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.test\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="environment" tabindex="-1">Environment <a class="header-anchor" href="#environment" aria-hidden="true">#</a></h2><p>The <code>mainFn</code> function from <code>@compas/stdlib</code>, and by extension <code>mainTestFn</code> and <code>mainBenchFn</code>, automatically loads the <code>.env.local</code> and <code>.env</code> files in the root of the project. The idea is that the <code>.env</code> contains default values for a quick development setup, so a new person on the team can just clone the project and run it directly. The <code>.env.local</code> values take precedence over values defined the <code>.env</code> file, and should be <code>.gitingore</code>&#39;d. This is useful when your particular dev setup is somehow different, ie your not using the <code>yarn compas docker</code> based Postgres instance, but need to connect to a different Postgres instance.</p><p>It is expected that production values for these environment variables are injected by the hosting method of choice.</p><p>Use <code>yarn compas help --check</code> to see if your <code>.env.local</code> is <code>.gitignore</code>&#39;d properly.</p>`,31),p=[o];function c(i,l,r,u,d,k){return a(),s("div",null,p)}var g=n(t,[["render",c]]);export{m as __pageData,g as default};
