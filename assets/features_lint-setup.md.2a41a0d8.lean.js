import{_ as n,c as e,o as t,a as s}from"./app.d0d65fcc.js";const f='{"title":"Lint setup","description":"","frontmatter":{},"headers":[{"level":2,"title":"Running the linter","slug":"running-the-linter"}],"relativePath":"features/lint-setup.md","lastUpdated":1635769453832}',a={},o=s(`__VP_STATIC_START__<h1 id="lint-setup" tabindex="-1">Lint setup <a class="header-anchor" href="#lint-setup" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Requires <code>@compas/cli</code> and <code>@compas/lint-config</code> to be installed as &#39;devDependencies&#39;.</p></div><p>The <code>@compas/lint-config</code> package provides a Prettier config and ESLint configuration. This configuration is tailored towards Javascript projects. When using Typescript you can still use the Prettier config, however the command (<code>yarn compas lint</code>) shouldn&#39;t be used. To get the configuration in your project, create the following three files:</p><p><strong>/.eslintrc.cjs</strong></p><div class="language-js"><pre><code><span class="token comment">/* eslint-disable import/no-commonjs */</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./node_modules/@compas/lint-config&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  root<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>/.prettierrc.cjs</strong></p><div class="language-js"><pre><code><span class="token comment">/* eslint-disable import/no-commonjs */</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@compas/lint-config/prettierrc.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>/.prettierignore</strong></p><div class="language-text"><pre><code>coverage/**
</code></pre></div><p>This way you should be able to easily override any configuration if necessary. By following the respective guides / configuration options:</p><ul><li><a href="https://eslint.org/docs/user-guide/configuring#configuring-rules" target="_blank" rel="noopener noreferrer">ESLint</a></li><li><a href="https://prettier.io/docs/en/options.html" target="_blank" rel="noopener noreferrer">Prettier</a></li><li><a href="https://github.com/benmosher/eslint-plugin-import/" target="_blank" rel="noopener noreferrer">eslint-plugin-import</a></li></ul><p>Now is also a good time to set up your IDE to use your local configuration.</p><h2 id="running-the-linter" tabindex="-1">Running the linter <a class="header-anchor" href="#running-the-linter" aria-hidden="true">#</a></h2><p>At the moment we have only configured the underlying tools but have not run anything yet. This is where <code>@compas/cli</code> comes in. This package also has a range of features, but for now we focus on two of them. Let&#39;s start with running the linters:</p><div class="language-shell"><pre><code><span class="token function">yarn</span> compas lint
</code></pre></div><p>This runs both ESLint and Prettier in auto fix mode over your Javascript files. Prettier will also look at plain JSON and Markdown files.</p><p>There is also an environment variable available that runs Prettier in &#39;check&#39; mode. This way it will only report errors and not run the auto fixer. This can be enabled by setting <code>CI=true</code>:</p><div class="language-shell"><pre><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">CI</span><span class="token operator">=</span>true
<span class="token function">yarn</span> compas lint
<span class="token builtin class-name">unset</span> CI
</code></pre></div><p>Most CI runners automatically set this environment variable, so the linter will fail when code is not formatted correctly.</p>__VP_STATIC_END__`,19),i=[o];function r(p,c,l,u,d,h){return t(),e("div",null,i)}var m=n(a,[["render",r]]);export{f as __pageData,m as default};
