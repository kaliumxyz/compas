import{_ as e,c as a,o,a as t}from"./app.d0d65fcc.js";const u='{"title":"Postgres migrations","description":"","frontmatter":{},"headers":[{"level":2,"title":"Migration files","slug":"migration-files"},{"level":2,"title":"Synopsis of @compas/cli","slug":"synopsis-of-compas-cli"},{"level":3,"title":"compas docker migrate","slug":"compas-docker-migrate"},{"level":3,"title":"compas docker migrate info","slug":"compas-docker-migrate-info"},{"level":3,"title":"compas docker migrate rebuild","slug":"compas-docker-migrate-rebuild"},{"level":3,"title":"compas docker migrate --keep-alive","slug":"compas-docker-migrate-keep-alive"}],"relativePath":"features/migrations.md","lastUpdated":1635769453832}',i={},s=t(`<h1 id="postgres-migrations" tabindex="-1">Postgres migrations <a class="header-anchor" href="#postgres-migrations" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Requires <code>@compas/cli</code> and <code>@compas/store</code> to be installed</p></div><h2 id="migration-files" tabindex="-1">Migration files <a class="header-anchor" href="#migration-files" aria-hidden="true">#</a></h2><p>Compas cli comes with a migration runner built-in. This is based on various migration functions exported from @compas/store. The migration system supports two types of migrations:</p><ul><li>Forward migrations</li><li>Repeatable migrations</li></ul><p>Forward migrations are a way of only advancing the schema state. So when you need to rollback a change, a new forward migration needs to be created.</p><p>Repeatable migrations can be used in combination with <code>CREATE OR REPLACE</code> with for example views. If the hash of the current repeatable migration is not equal to the last execution stored in the database, the migration is executed.</p><p>Every migration file gets a new transaction by default. To skip transaction creation, add <code>-- disable auto transaction</code> in your file.</p><p>The migrations files are expected to live in <code>$project/migrations</code> directory. The file names should be in the following format: <code>001-name.sql</code> or <code>002-r-long-name.sql</code> for repeatable migrations.</p><p>We also support JavaScript based migrations, this allows you to do conditional logic based on environment settings. A JavaScript migration file follows the same file format as sql files: <code>002-my-js-migration.js</code>. To disable automatic transactions you can use <code>// disable auto transaction</code> anywhere in the file.</p><p>The file is imported by the migration runner and expected to export the following migration function:</p><div class="language-js"><pre><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">migrate</span><span class="token punctuation">(</span><span class="token parameter">sql</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do migrations</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Note that it is suggested to keep the amount of differences per environment to a minimal, since it makes issues harder to debug.</p><h2 id="synopsis-of-compas-cli" tabindex="-1">Synopsis of @compas/cli <a class="header-anchor" href="#synopsis-of-compas-cli" aria-hidden="true">#</a></h2><p><code>compas docker migrate [rebuild|info] [--keep-alive]</code></p><h3 id="compas-docker-migrate" tabindex="-1"><code>compas docker migrate</code> <a class="header-anchor" href="#compas-docker-migrate" aria-hidden="true">#</a></h3><p>Read the <code>$project/migrations</code> directory, print out migration information, see <code>compas docker migrate info</code>, and execute the pending migrations. The process exits afterwards.</p><h3 id="compas-docker-migrate-info" tabindex="-1"><code>compas docker migrate info</code> <a class="header-anchor" href="#compas-docker-migrate-info" aria-hidden="true">#</a></h3><p>Print information about the migration state and exit. The information consists of migrations that are not applied yet, and migrations that have &#39;hashChanges&#39;, basically saying that the file on disk is out of sync with the migration that was applied in the past.</p><h3 id="compas-docker-migrate-rebuild" tabindex="-1"><code>compas docker migrate rebuild</code> <a class="header-anchor" href="#compas-docker-migrate-rebuild" aria-hidden="true">#</a></h3><p>Rebuild migration table with current file state. This allows for reordering migrations, squashing migrations and other things that alter the migration files, but do not affect the schema in any way. Note that Compas can&#39;t enforce any consistency between the migration files and the current schema state. So use with caution.</p><h3 id="compas-docker-migrate-keep-alive" tabindex="-1"><code>compas docker migrate --keep-alive</code> <a class="header-anchor" href="#compas-docker-migrate-keep-alive" aria-hidden="true">#</a></h3><p>Same as <code>compas docker migrate</code>, except keeping the Postgres connection running. This is useful when your deploy solution doesn&#39;t allow for one of commands, but allows private services that consume some sporadic resources.</p>`,23),n=[s];function r(c,d,p,l,m,h){return o(),a("div",null,n)}var f=e(i,[["render",r]]);export{u as __pageData,f as default};
