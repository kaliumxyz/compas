import{_ as e,c as t,o as a,a as n}from"./app.d0d65fcc.js";const b='{"title":"@compas\\\\/cli","description":"","frontmatter":{"editLink":false},"headers":[{"level":2,"title":"mainTestFn","slug":"maintestfn"},{"level":2,"title":"newTestEvent","slug":"newtestevent"},{"level":2,"title":"bench","slug":"bench"},{"level":2,"title":"mainBenchFn","slug":"mainbenchfn"}],"relativePath":"api/cli.md","lastUpdated":1635769453828}',r={},i=n('<h1 id="compas-cli" tabindex="-1">@compas/cli <a class="header-anchor" href="#compas-cli" aria-hidden="true">#</a></h1><div><h2 id="maintestfn" tabindex="-1">mainTestFn <a class="header-anchor" href="#maintestfn" aria-hidden="true">#</a></h2><p><em>Available since 0.1.0</em></p><p><em>function mainTestFn(meta): void</em></p><p>Wraps <code>mainFn</code> and starts the test runner if not already started. By calling this in your test files, it allows the test file to be directly executed via <code>node file.test.js</code>. When the runner is already active, this function will be a no op.</p><p><strong>Parameters</strong>:</p><ul><li>meta <code>ImportMeta</code></li></ul><p><em><a href="https://github.com/compasjs/compas/blob/main/packages/cli/src/testing/utils.js#L25" target="_blank" rel="noopener noreferrer">source</a></em></p><h2 id="newtestevent" tabindex="-1">newTestEvent <a class="header-anchor" href="#newtestevent" aria-hidden="true">#</a></h2><p><em>Available since 0.1.0</em></p><p><em>function newTestEvent({import(&quot;./state&quot;).TestRunner} t): {import(&quot;@compas/stdlib&quot;).InsightEvent}</em></p><p>Create a new test event</p><p><strong>Parameters</strong>:</p><ul><li>{import(&quot;./state&quot;).TestRunner} t <code>{import(&quot;./state&quot;).TestRunner} t</code>: {import(&quot;./state&quot;).TestRunner} t</li></ul><p><em><a href="https://github.com/compasjs/compas/blob/main/packages/cli/src/testing/events.js#L11" target="_blank" rel="noopener noreferrer">source</a></em></p><h2 id="bench" tabindex="-1">bench <a class="header-anchor" href="#bench" aria-hidden="true">#</a></h2><p><em>Available since 0.1.0</em></p><p><em>function bench(name, callback): void</em></p><p>Benchmark entry point. The benchmark runner will wait a bit till now new benchmarks are registered and then start execution.</p><p><strong>Parameters</strong>:</p><ul><li>name <code>string</code></li><li>callback <code>BenchCallback</code></li></ul><p><em><a href="https://github.com/compasjs/compas/blob/main/packages/cli/src/benchmarking/runner.js#L48" target="_blank" rel="noopener noreferrer">source</a></em></p><h2 id="mainbenchfn" tabindex="-1">mainBenchFn <a class="header-anchor" href="#mainbenchfn" aria-hidden="true">#</a></h2><p><em>Available since 0.1.0</em></p><p><em>function mainBenchFn(meta): void</em></p><p>Wraps <code>mainFn</code> and starts the benchmark runner if not already started. By calling this in your bench files, it allows the benchmark file to be directly executed via <code>node file.bench.js</code>. When the runner is already active, this function will be a no op.</p><p><strong>Parameters</strong>:</p><ul><li>meta <code>ImportMeta</code></li></ul><p><em><a href="https://github.com/compasjs/compas/blob/main/packages/cli/src/benchmarking/utils.js#L22" target="_blank" rel="noopener noreferrer">source</a></em></p></div>',2),s=[i];function c(o,l,p,m,h,d){return a(),t("div",null,s)}var f=e(r,[["render",c]]);export{b as __pageData,f as default};
