import{_ as e,c as o,o as t,a as r}from"./app.d0d65fcc.js";const g='{"title":"Release notes v0.0.124","description":"","frontmatter":{},"headers":[{"level":2,"title":"Lint config","slug":"lint-config"},{"level":2,"title":"Code gen","slug":"code-gen"},{"level":2,"title":"More notes","slug":"more-notes"},{"level":2,"title":"In closing","slug":"in-closing"}],"relativePath":"releases/0.0.124.md","lastUpdated":1635769453832}',a={},s=r('<h1 id="release-notes-v0-0-124" tabindex="-1">Release notes v0.0.124 <a class="header-anchor" href="#release-notes-v0-0-124" aria-hidden="true">#</a></h1><p>A bit of a hectic last weeks for me, since I got an adorable pup. So I can&#39;t promise that the release works completely or that these docs are complete.</p><h2 id="lint-config" tabindex="-1">Lint config <a class="header-anchor" href="#lint-config" aria-hidden="true">#</a></h2><p>The linter got another update. Based on the <a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/errorhandling/returningpromises.md" target="_blank" rel="noopener noreferrer">&#39;Node.js best practice&#39;</a> of returning promises, we removed the &#39;no-return-await&#39; rule and added the &#39;require-await&#39; rule. It boils down to the following: stacktraces are better when promises are awaited instead of &#39; implicit&#39; returned. The ESLint rules don&#39;t cover everything, so most recommendations are not enforced yet. The article also talks a bit about the performance cost, which is negligible in case of for example database calls.</p><p>For more information please read the <a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/errorhandling/returningpromises.md" target="_blank" rel="noopener noreferrer">recommendation</a> .</p><h2 id="code-gen" tabindex="-1">Code gen <a class="header-anchor" href="#code-gen" aria-hidden="true">#</a></h2><p>Of course, most of the breaking stuff happens here. We introduced a &#39;common&#39; directory and split the various outputs of generators over subdirectories named by their groups. This should make it easier to discover related api calls and minimize diffs. Let&#39;s go over each generator and check what has changed.</p><p><strong>types</strong>:</p><p>The type generator has the least of all changes, but now resides in the <code>$outputDirectory/common</code> directory.</p><p><strong>structure</strong>:</p><p>As used by <code>dumpStructure</code> and <code>dumpApiStructure</code>. This file is now also in the <code>$outputDirectory/common</code> directory.</p><p><strong>router</strong>:</p><p>The router middleware, <code>setBodyParsers</code> and <code>groupMiddleware</code> are all exported from the <code>$outputDirectory/common</code> directory. The handlers and tags are now exported from <code>$outputDirectory/$group/controller.js</code>.</p><p><strong>validator</strong>:</p><p>The validator generator behaves much like the &#39;router&#39; generator. The usable api is exposed from <code>$outputDirectory/$group/validatorsjs</code> and the &#39;common&#39; directory is used to store the &#39;anonymous-validators&#39; (the plain JS, deduplicated, validation functions).</p><p><strong>apiClient</strong>:</p><p>The api-call functions are now split by group in <code>$outputDirectory/$group/apiClient.js</code>. The apiClient generator has some more breaking changes. We now expect an &#39;Axios&#39; instance as the first argument of each function. This allows you to manage the &#39;Axios&#39; instance however you wish. This also means that both <code>isBrowser</code> and <code>isNode</code> settings generate the same functions, so it&#39;s more intuitive to use. It is expected that the <code>addRequestIdInterceptors</code> is called which is exported from <code>$outputDirectory/common/apiClient.js</code>.</p><p><strong>reactQuery</strong>:</p><p>All types and the <code>useApi</code> hook are now epxorted from <code>$outputDirectory/common/reactQuery.ts</code>. The hooks are split per group as well and can be found in <code>$outputDirectory/$group/reactQueries.tsx</code>.</p><p><strong>sql</strong>:</p><p>The sql generator still prefers the <code>$outputDirectory/databse</code> directory, but only exports the <code>queries</code> object from <code>$outputDirectory/database/index.js</code>.</p><h2 id="more-notes" tabindex="-1">More notes <a class="header-anchor" href="#more-notes" aria-hidden="true">#</a></h2><ul><li>The easiest way to deal with all the import errors is probably to remove all imports (<code>/import \\{[\\w\\n ,]+} from &quot;./generated[\\w\\./]+&quot;;/gm</code>), and let your IDE resolve them all again.</li><li>When doing lots of api calls from the server, it is advised to add a custom <code>https.Agent</code> when creating the <code>Axios</code> instance. This way you can enable connection &#39;keep-alive&#39; and timeouts.</li><li>All <code>index.js</code> files are removed, add a sorted imports rule to your ESLint config, as that list may grow a bit.</li><li>The <code>$outputDirectory</code> is completely wiped on each <code>app.generate</code> call. This to enforce <code>import</code>-ing from the <code>controller</code> files instead of directly editing them.</li><li><code>common</code> is now a reserved name in the code generator and can&#39;t be used as a group name.</li></ul><h2 id="in-closing" tabindex="-1">In closing <a class="header-anchor" href="#in-closing" aria-hidden="true">#</a></h2><p><em>Some words of encouragement for all breaking changes</em>. I can&#39;t guarantee that everything works as expected, since my brain only functions at half capacity currently and not everything is covered by tests <a href="https://github.com/compasjs/compas/issues/78" target="_blank" rel="noopener noreferrer"><sub><sup><sup>please help</sup></sup></sub></a>. Also more breaking changes are planned, see <a href="https://github.com/compasjs/compas/issues/754" target="_blank" rel="noopener noreferrer">#754</a> and <a href="https://github.com/compasjs/compas/issues/703" target="_blank" rel="noopener noreferrer">#703</a>.</p>',25),n=[s];function i(c,d,l,p,h,u){return t(),o("div",null,n)}var f=e(a,[["render",i]]);export{g as __pageData,f as default};
